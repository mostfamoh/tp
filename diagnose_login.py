#!/usr/bin/env python
"""
Script de diagnostic pour le probl√®me de login
"""

import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from crypto_lab.models import CustomUser
from backend.cryptotoolbox import decrypt_with_algorithm

def diagnose_login_issue():
    print("\n" + "=" * 70)
    print("  üîç DIAGNOSTIC DU PROBL√àME DE LOGIN")
    print("=" * 70 + "\n")
    
    # Trouver des utilisateurs de test
    users = CustomUser.objects.all()[:5]
    
    if not users:
        print("‚ùå Aucun utilisateur trouv√© dans la base de donn√©es")
        return
    
    print(f"üìã Utilisateurs trouv√©s: {users.count()}\n")
    
    for user in users:
        print(f"\n{'‚îÄ' * 70}")
        print(f"üë§ Utilisateur: {user.username}")
        print(f"   Algorithme: {user.algorithm}")
        print(f"   Cl√©: {user.key_data}")
        print(f"   Mot de passe chiffr√©: {user.password_encypted}")
        
        try:
            # D√©chiffrer le mot de passe
            algo = user.algorithm.lower()
            if algo == 'cesar':
                algo = 'caesar'
            elif algo == 'plaiyfair':
                algo = 'playfair'
            
            decrypted = decrypt_with_algorithm(algo, user.password_encypted, user.key_data)
            print(f"   Mot de passe d√©chiffr√©: {decrypted}")
            
            # V√©rifier si c'est un mot de passe num√©rique converti
            has_letters_abcdefghij = any(c in 'ABCDEFGHIJ' for c in decrypted)
            print(f"   Contient A-J (conversion num√©rique): {has_letters_abcdefghij}")
            
            # Si c'est une conversion num√©rique, montrer l'original
            if has_letters_abcdefghij and all(c in 'ABCDEFGHIJ' for c in decrypted):
                numeric_version = ''.join([str(ord(c) - ord('A')) for c in decrypted])
                print(f"   ‚ö†Ô∏è  Mot de passe original probable: {numeric_version}")
                print(f"   üí° Pour se connecter, utiliser: {numeric_version}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur de d√©chiffrement: {e}")
    
    print("\n" + "=" * 70)
    print("  üí° SOLUTION")
    print("=" * 70)
    print("\nLe probl√®me vient de la conversion des chiffres en lettres.")
    print("Lors du LOGIN, le mot de passe doit AUSSI √™tre converti.")
    print("\nExemple:")
    print("  ‚Ä¢ Vous entrez: 123")
    print("  ‚Ä¢ Doit √™tre converti en: BCD")
    print("  ‚Ä¢ Puis compar√© avec le mot de passe d√©chiffr√©")
    print("\n")

if __name__ == '__main__':
    diagnose_login_issue()
