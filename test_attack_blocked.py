"""
Test pour v√©rifier que la protection BLOQUE les attaques automatiques
Apr√®s modification des endpoints pour v√©rifier la protection
"""

import requests
import json

BASE_URL = "http://127.0.0.1:8000/api"

def print_section(title):
    print(f"\n{'='*60}")
    print(f"  {title}")
    print('='*60)

def test_attack_blocked():
    """Test complet : la protection doit maintenant bloquer les attaques"""
    
    username = "bellia"
    
    print_section("TEST : Protection contre les attaques")
    print(f"Compte test√©: {username}")
    
    # √âTAPE 1: D√©sactiver la protection
    print_section("√âTAPE 1: D√©sactiver la protection")
    response = requests.post(f"{BASE_URL}/users/{username}/toggle-protection/", json={
        'enabled': False
    })
    if response.status_code == 200:
        print(f"‚úÖ Protection d√©sactiv√©e")
    else:
        print(f"‚ùå Erreur: {response.text}")
        return
    
    # √âTAPE 2: Attaque SANS protection (doit fonctionner)
    print_section("√âTAPE 2: Attaque sans protection")
    response = requests.post(f"{BASE_URL}/attack/full_dictionary/", json={
        'target_username': username,
        'dictionary_type': 'test',
        'max_seconds': 5
    })
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ Attaque lanc√©e avec succ√®s")
        print(f"   Tentatives: {data.get('attempts', 0)}")
        print(f"   Temps: {data.get('time_sec', 0):.2f}s")
        print(f"   R√©sultats: {data.get('matches_count', 0)} correspondances")
    else:
        print(f"‚ùå Attaque bloqu√©e: {response.status_code}")
        print(f"   Message: {response.json().get('message', 'N/A')}")
    
    # √âTAPE 3: Activer la protection
    print_section("√âTAPE 3: Activer la protection")
    response = requests.post(f"{BASE_URL}/users/{username}/toggle-protection/", json={
        'enabled': True
    })
    if response.status_code == 200:
        print(f"‚úÖ Protection activ√©e")
    else:
        print(f"‚ùå Erreur: {response.text}")
        return
    
    # √âTAPE 4: V√©rifier le statut
    print_section("√âTAPE 4: V√©rifier le statut de protection")
    response = requests.get(f"{BASE_URL}/users/{username}/protection-status/")
    if response.status_code == 200:
        data = response.json()
        print(f"   Protection activ√©e: {data.get('protection_enabled')}")
        print(f"   Tentatives: {data.get('failed_attempts')}/3")
        print(f"   Compte bloqu√©: {data.get('is_locked')}")
    
    # √âTAPE 5: Attaque AVEC protection (doit √™tre bloqu√©e)
    print_section("√âTAPE 5: Attaque avec protection activ√©e")
    response = requests.post(f"{BASE_URL}/attack/full_dictionary/", json={
        'target_username': username,
        'dictionary_type': 'test',
        'max_seconds': 5
    })
    
    if response.status_code == 403:
        data = response.json()
        print(f"üõ°Ô∏è  ATTAQUE BLOQU√âE PAR LA PROTECTION!")
        print(f"   Code HTTP: {response.status_code}")
        print(f"   Erreur: {data.get('error')}")
        print(f"   Message: {data.get('message')}")
        print(f"   Suggestion: {data.get('suggestion')}")
    elif response.status_code == 200:
        data = response.json()
        print(f"‚ö†Ô∏è  ATTAQUE NON BLOQU√âE (probl√®me!)")
        print(f"   Tentatives: {data.get('attempts', 0)}")
        print(f"   Temps: {data.get('time_sec', 0):.2f}s")
    else:
        print(f"‚ùì R√©ponse inattendue: {response.status_code}")
        print(f"   {response.text}")
    
    # √âTAPE 6: Tester aussi la force brute
    print_section("√âTAPE 6: Attaque force brute avec protection")
    response = requests.post(f"{BASE_URL}/attack/full_bruteforce/", json={
        'target_username': username,
        'max_seconds': 5
    })
    
    if response.status_code == 403:
        data = response.json()
        print(f"üõ°Ô∏è  ATTAQUE FORCE BRUTE BLOQU√âE!")
        print(f"   Erreur: {data.get('error')}")
        print(f"   Message: {data.get('message')}")
    elif response.status_code == 200:
        print(f"‚ö†Ô∏è  ATTAQUE NON BLOQU√âE (probl√®me!)")
    else:
        print(f"‚ùì R√©ponse: {response.status_code}")
    
    # √âTAPE 7: V√©rifier que le compteur n'a pas chang√©
    print_section("√âTAPE 7: V√©rifier le compteur apr√®s attaques")
    response = requests.get(f"{BASE_URL}/users/{username}/protection-status/")
    if response.status_code == 200:
        data = response.json()
        print(f"   Tentatives: {data.get('failed_attempts')}/3")
        if data.get('failed_attempts') == 0:
            print(f"   ‚úÖ Le compteur est rest√© √† 0 (attaques bloqu√©es en amont)")
        else:
            print(f"   ‚ö†Ô∏è  Le compteur a augment√©!")
    
    # √âTAPE 8: Conclusion
    print_section("CONCLUSION")
    print("""
    ‚úÖ La protection fonctionne maintenant contre les attaques!
    
    Comportement:
    - Protection d√©sactiv√©e ‚Üí Attaques autoris√©es
    - Protection activ√©e ‚Üí Attaques bloqu√©es (403 Forbidden)
    - Message informatif pour l'utilisateur
    - Compteur ne s'incr√©mente pas (attaques bloqu√©es avant ex√©cution)
    
    Dans le contexte p√©dagogique:
    - Les √©tudiants peuvent activer/d√©sactiver la protection
    - Quand activ√©e, les attaques sont bloqu√©es
    - Le syst√®me explique pourquoi et comment d√©bloquer
    """)

if __name__ == '__main__':
    try:
        test_attack_blocked()
    except requests.exceptions.ConnectionError:
        print("\n‚ùå Erreur: Le serveur Django n'est pas accessible.")
        print("   Assurez-vous que le serveur tourne sur http://127.0.0.1:8000")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
