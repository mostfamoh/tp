"""
Script de test pour l'analyse de complexit√© de mots de passe (Partie 3)

Ce script teste les trois cas de complexit√© de mots de passe et g√©n√®re
des rapports d√©taill√©s sur:
1. Les attaques par force brute
2. Les attaques par dictionnaire
3. Les recommandations de protection

Cas test√©s:
- Cas 1: 3 caract√®res parmi {0, 1, 2} - Keyspace: 27
- Cas 2: 6 caract√®res num√©riques {0-9} - Keyspace: 1,000,000
- Cas 3: 6 caract√®res alphanum√©riques + sp√©ciaux - Keyspace: ~735 milliards
"""

import sys
import os
import json
import time

# Add project root to path
project_root = os.path.abspath(os.path.dirname(__file__))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Import directly from the module to avoid __init__.py issues
import importlib.util
spec = importlib.util.spec_from_file_location(
    "password_analysis", 
    os.path.join(project_root, "backend", "cryptotoolbox", "attack", "password_analysis.py")
)
password_analysis = importlib.util.module_from_spec(spec)
spec.loader.exec_module(password_analysis)

analyze_password_case = password_analysis.analyze_password_case
get_all_cases_info = password_analysis.get_all_cases_info
get_protection_recommendations = password_analysis.get_protection_recommendations


def print_header(text):
    """Print a formatted header."""
    print("\n" + "=" * 80)
    print(f"  {text}")
    print("=" * 80 + "\n")


def print_subheader(text):
    """Print a formatted subheader."""
    print("\n" + "-" * 80)
    print(f"  {text}")
    print("-" * 80)


def format_time(seconds):
    """Format time in human-readable format."""
    if seconds < 0.001:
        return f"{seconds * 1_000_000:.2f} microsecondes"
    elif seconds < 1:
        return f"{seconds * 1000:.2f} millisecondes"
    elif seconds < 60:
        return f"{seconds:.2f} secondes"
    elif seconds < 3600:
        return f"{seconds / 60:.2f} minutes"
    elif seconds < 86400:
        return f"{seconds / 3600:.2f} heures"
    else:
        return f"{seconds / 86400:.2f} jours"


def test_password_case(case_id, sample_password=None):
    """Test a specific password case."""
    print_subheader(f"Test du {case_id.upper()}")
    
    result = analyze_password_case(case_id, sample_password)
    
    if 'error' in result:
        print(f"‚ùå Erreur: {result['error']}")
        return result
    
    # Case information
    case_info = result['case_info']
    print(f"üìä {case_info['name']}")
    print(f"   Description: {case_info['description']}")
    print(f"   Charset: {case_info['charset']}")
    print(f"   Taille du charset: {case_info['charset_size']}")
    print(f"   Longueur du mot de passe: {case_info['password_length']}")
    print(f"   Espace de cl√©s total: {case_info['keyspace_formatted']}")
    
    # Test password
    print(f"\nüîê Mot de passe test√©: '{result['test_password']}'")
    
    # Brute-force attack results
    if 'brute_force' in result['attacks']:
        bf = result['attacks']['brute_force']
        print(f"\n‚öîÔ∏è  Attaque par Force Brute:")
        print(f"   Statut: {'‚úÖ SUCC√àS' if bf['success'] else '‚ùå √âCHEC'}")
        print(f"   Tentatives: {bf['attempts']:,}")
        print(f"   Temps √©coul√©: {format_time(bf['time_seconds'])}")
        print(f"   Vitesse: {bf['attempts_per_second']:,.0f} tentatives/seconde")
        print(f"   Espace explor√©: {bf['percentage_searched']:.4f}%")
        
        if 'estimated_full_keyspace_time' in bf:
            est = bf['estimated_full_keyspace_time']
            print(f"\n   ‚è±Ô∏è  Temps estim√© pour explorer tout l'espace:")
            if 'years' in est:
                print(f"      ‚Ä¢ {est['years']:,.2f} ann√©es")
            elif 'days' in est:
                print(f"      ‚Ä¢ {est['days']:,.2f} jours")
            elif 'hours' in est:
                print(f"      ‚Ä¢ {est['hours']:,.2f} heures")
            elif 'minutes' in est:
                print(f"      ‚Ä¢ {est['minutes']:,.2f} minutes")
            else:
                print(f"      ‚Ä¢ {est['seconds']:,.2f} secondes")
        
        if 'note' in bf:
            print(f"   ‚ÑπÔ∏è  Note: {bf['note']}")
    
    # Dictionary attack results
    if 'dictionary' in result['attacks']:
        da = result['attacks']['dictionary']
        print(f"\nüìñ Attaque par Dictionnaire:")
        print(f"   Statut: {'‚úÖ SUCC√àS' if da['success'] else '‚ùå √âCHEC'}")
        print(f"   Taille du dictionnaire: {da['dictionary_size']:,}")
        print(f"   Tentatives: {da['attempts']:,}")
        print(f"   Temps √©coul√©: {format_time(da['time_seconds'])}")
        print(f"   Vitesse: {da['attempts_per_second']:,.0f} tentatives/seconde")
    
    return result


def main():
    """Main test function."""
    print_header("TEST DE COMPLEXIT√â DES MOTS DE PASSE - PARTIE 3")
    
    print("Ce script teste trois niveaux de complexit√© de mots de passe:")
    print("1. Cas 1: 3 caract√®res parmi {0, 1, 2}")
    print("2. Cas 2: 6 caract√®res num√©riques (0-9)")
    print("3. Cas 3: 6 caract√®res alphanum√©riques + caract√®res sp√©ciaux")
    
    # Get all cases info
    print_subheader("Informations sur les Cas de Test")
    cases_info = get_all_cases_info()
    for case_id, info in cases_info.items():
        print(f"\n{case_id.upper()}:")
        print(f"  Nom: {info['name']}")
        print(f"  Description: {info['description']}")
        print(f"  Espace de cl√©s: {info['keyspace_formatted']}")
    
    # Test each case
    all_results = {}
    
    # Case 1: Very weak (3 chars from {0,1,2})
    result1 = test_password_case('case1', '012')
    all_results['case1'] = result1
    
    # Case 2: Weak (6 numeric chars)
    result2 = test_password_case('case2', '123456')
    all_results['case2'] = result2
    
    # Case 3: Medium (6 alphanumeric + special chars)
    result3 = test_password_case('case3', 'aB3!xY')
    all_results['case3'] = result3
    
    # Protection recommendations
    print_header("RECOMMANDATIONS DE PROTECTION")
    recommendations = get_protection_recommendations()
    
    print(f"üìã {recommendations['title']}\n")
    
    for category in recommendations['categories']:
        print(f"\nüîπ {category['category']}")
        for rec in category['recommendations']:
            print(f"\n   ‚úì {rec['recommendation']}")
            print(f"     {rec['description']}")
            if 'implementation' in rec:
                print(f"     üí° Impl√©mentation: {rec['implementation']}")
            if 'impact' in rec:
                print(f"     üí• Impact: {rec['impact']}")
    
    # Comparison table
    print_header("COMPARAISON DES TEMPS DE CRAQUAGE")
    print(recommendations['comparison']['note'])
    print()
    
    for example in recommendations['comparison']['examples']:
        print(f"\nüîê {example['password']}")
        if 'keyspace' in example:
            keyspace = example['keyspace']
            if isinstance(keyspace, (int, float)):
                print(f"   Espace: {keyspace:,}")
            else:
                print(f"   Espace: {keyspace}")
        if 'time_cracked' in example:
            print(f"   Temps: {example['time_cracked']}")
        if 'time_per_attempt' in example:
            print(f"   Temps/tentative: {example['time_per_attempt']}")
        if 'note' in example:
            print(f"   Note: {example['note']}")
        print(f"   S√©curit√©: {example['security']}")
    
    # Save results to file
    output_file = os.path.join(project_root, 'password_analysis_results.json')
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            'cases_info': cases_info,
            'test_results': all_results,
            'recommendations': recommendations
        }, f, ensure_ascii=False, indent=4)
    
    print_header("R√âSULTATS SAUVEGARD√âS")
    print(f"‚úÖ Rapport complet sauvegard√© dans: {output_file}")
    
    # Summary
    print_header("R√âSUM√â")
    print("‚úÖ Test du Cas 1 (3 chars, {0,1,2}): TERMIN√â")
    print("‚úÖ Test du Cas 2 (6 chars num√©riques): TERMIN√â")
    print("‚úÖ Test du Cas 3 (6 chars alphanum√©riques + sp√©ciaux): TERMIN√â")
    print("‚úÖ Recommandations de protection: G√âN√âR√âES")
    print("\n" + "=" * 80)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
